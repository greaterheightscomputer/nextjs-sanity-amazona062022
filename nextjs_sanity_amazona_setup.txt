Tools
Vs code
node.js
git

Technologies
1. Nextjs - is a react framework for creating production ready website
2. React Hook
3. Sanity CMS - to handle the backend of the web app
4. Payment gateway- Paypal and PayStack 
5. Deployment is handle by Vercel Cloud Provider

check the following version
- C:\ComputerD\nextjs_sanity-amazona062022> node --version
v14.18.1
- C:\ComputerD\nextjs_sanity-amazona062022> npm --version
8.7.0
- C:\ComputerD\nextjs_sanity-amazona062022> git --version
git version 2.21.0.windows.1

Let configure Vscode to enable code smarter with the text edit
- click on extension icon to install the following
1. Prettier - Code formatter extension
  * click manage icon, click on Settings, 
  * search for defaultformater, select Pettier in the dropdown box
  * search for formatonsave, then check format a file on save
  * search for singlequote, then check Prettier: Single Quote
  * brack colorizer, press ctrl + p, search >json, select Preference: Open Settings(JSON)
 then type this "editor.bracketPairColorization.enabled": true, right after "prettier.singleQuote": true,
2. ESLint - its show error in our code
3. JavaScript (ES6) code snippets by charalampos Karypidis - This extension contains code snippets for JavaScript in ES6 syntax for Vs Code editor (supports both JavaScript and TypeScript).
4. ES7+ React/Redux/React-Native snippets by dsznajder - its enable us to automatically generate code for react component by typing rfc 

Create Next App
- Create Next App by going to nextjs.org/docs/api-reference/create-next-app
- copy this npx create-next-app@latest to create next app on your terminal
- type code . to open your newly created next app on a new vscode.
- start up the dev server like this 
C:\ComputerD\nextjs-sanity-amazona062022> yarn dev OR
C:\ComputerD\nextjs-sanity-amazona062022> npm run dev
- let install the following dependencies 
* @mui/material @mui/styles @mui/icons-material - for style the nextjs app
* @emotion/styled @emotion/server @emotion/react - to handle the cache in the nextjs app like this
C:\ComputerD\nextjs-sanity-amazona062022>npm install @emotion/react@11.7.1 @emotion/server@11.4.0 @emotion/styled@11.6.0
C:\ComputerD\nextjs-sanity-amazona062022>npm install @mui/icons-material@5.4.1 @mui/material@5.4.1 @mui/styles@5.4.1 --force

- create _document.js file inside pages folder inorder to add some content on the head tags of all the react components created in this app. The content added onto the head tags will change the way will render our react components, its will include material UI in the process of render components in the browser.

- open _app.js file inorder to add content that we be use throughtout the app body.

- open index.js for modification.
* change the content of the title tags in the Head tags
* change the content of the meta tag 
* change the icon by google search fonts.google.com/icons, click on Shoppign Cart Checkout icon, then download the SVG
* past the SVG icon inside public folder
* remove the following 
1. import Image from 'next/image'; 
   import styles from '../styles/Home.module.css'; and its usage
2. main and footer tags

- add <Typography component="h1" variant="h1">
        Sanity Amazona
      </Typography>
* component="h1" means h1 tags and variant="h1" means class selector h1
* click on Elements tags to view the material ui. This means the material UI install and configure is working fine. 

- Push code to Github by login or signup if you are a new user.
- C:\ComputerD\nextjs-sanity-amazona062022> git init
- C:\ComputerD\nextjs-sanity-amazona062022> git status
- C:\ComputerD\nextjs-sanity-amazona062022> git add .
- C:\ComputerD\nextjs-sanity-amazona062022> git commit -m "sanity-amazona 1"
- C:\ComputerD\nextjs-sanity-amazona062022> git remote add origin git@github.com:greaterheightscomputer/nextjs-sanity-amazona062022.git
- C:\ComputerD\nextjs-sanity-amazona062022> git branch -M main
- C:\ComputerD\nextjs-sanity-amazona062022> git push -u origin main

Create Website Layout
1. Add header
2. Add main
3. Add footer
- create components folder in the root folder
- create components/Layout.js file which is the wrapper for styling all the other component in this app.
- let setup components/Layout.js file 
- let use components/Layout.js file inside pages/index.js file 
- open index.js file then remove the content inside index.js from the root div tags  
- use Layout component inside index.js file 
- create utils folder in the root folder 
- create classes.js file in utils folder inorder to properly set the layout of the app
- setup classes.js file and use classes object in Layout component like this 
<AppBar position="static" sx={classes.appbar}>
- import classes from '../utils/classes'; onto Layout.js file 
- let checkout the result on the browser
- click on Elements tab you will see the following
<header></header>
<main></main>
<footer></footer>

Sanity cms
- go to jamstack.org/headless-cms/sanity
- Sanity.io is the platform for strctured content. Sanity will be use to save and retrival data for this e-commerce.
 Connect to Sanity.io
   1. install sanity
   2. initialize sanity
   3. create product model
   4. insert sample data to product model
- go to sanity.io, click on Get started
OR 
- go to sanity.io/codingwithbasir to get started with the boosted free plan
- copy this npm install -g @sanity/cli  and past its onto the terminal
- copy this sanity init --coupon codingwithbasir and past its onto the terminal 
* for a new user, you will ask to login with Google Account
* Project name: sanity-amazona
* Use the default dataset configuration? (Y/n) press enter to choice Y
*  Project output path: sanity
* use arrow key to select  Clean project with no predefined schemas 
- after successfull installation of sanity then open another terminal and  change directory like this
C:\ComputerD\nextjs-sanity-amazona062022> cd sanity
C:\ComputerD\nextjs-sanity-amazona062022\sanity> 
- fix the issue with source control, open .gitignore file and change the node_modules from this 
/node_modules to this node_modules by doing this we have ignore the node_module inside the root folder and sanity folder as well.
- startup sanity studio like this 
C:\ComputerD\nextjs-sanity-amazona062022\sanity> sanity start
- control click on this url Content Studio successfully compiled! Go to http://localhost:3333
- its return this message on the browser
Weâ€™ll generate a UI here as soon as you build your first schema.
- next is to go and create a schema called product by clicking on sanity/schemas
- create product.js file inside sanity/schemas folder
- setup product schema
- open schemas/schema.js to use product schema 
- type product inside  types: schemaTypes.concat([]), 
- import product from './product'; onto schemas/schema.js file 
- back to the browser to view the product schema rendered on the browser
- click on Product, click icon inorder to add document onto Product schema
- create images folder inside public folder then copy all the images needed onto the images folder
- add values onto the sanity document
* Add 1st Product
Name: Free Shirt
Price: 70
Image: upload the first image
Description: A popular shirt
Slug: free-shirt
Brand: Nike
Category: Shirts
Rating: 4.5
NumReviews: 10
CountInStock: 20
click on Publish to save the document onto sanity dataset which cloud base database
* Add 2nd Product
Name: Fit Shirt
Price: 80
Image: upload the second image
Description: A great shirt
Slug: fit-shirt
Brand: Adidas
Category: Shirts
Rating: 4.2
NumReviews: 30
CountInStock: 10
* Add 3rd Product
Name: Golf Pants
Price: 90
Image: upload the third image
Description: Smart looking pants
Slug: golf-pants
Brand: Oliver
Category: Pants
Rating: 4.6
NumReviews: 12
CountInStock: 15
* Add 4th Product
Name: Fit Pants
Price: 150
Image: upload the forth image
Description: A popular pants
Slug: fit-pants
Brand: Casely
Category: Pants
Rating: 3.6
NumReviews: 40
CountInStock: 30

List Products
1. add localhost:3000 to the CORS origins in sanity
2. fetch products from sanity
3. render them in the screen
- add localhost:3000 to the CORS origins in sanity by going to https://www.sanity.io/manage
- click on sanity-amazona project 
- click on API 
- click on Add CORS origin button
- enter http://localhost:3000  onto Origin input field
- check Allow credentials and click on Save button
- by setting the above we can now send ajax request from next.js to sanity cms which is backend
- install @sanity/client library inside root folder inorder to connect next.js with sanity dataset like this
 C:\ComputerD\nextjs-sanity-amazona062022> npm install @sanity/client --force
- create client.js inside utils folder and setup client.js file
- import client from '@sanity/client'; onto utils/client.js file
- create config.js file inside utils folder and setup config.js file
- copy PROJECT ID by going back to sanity.io/manage/personal then past its inside config.js file
- import config from './config'; onto client.js file 
- open pages/index.js to use client method inorder to implement useEffect() method to fetch data from sanity dataset
- import client from '../utils/client'; onto index.js file
- use sanity queries language to fetch data from sanity dataset
- for more info on sanity queries language go to sanity.io/docs/how-queries-work like this 
 const products = await client.fetch(`*[_type == "product"]`);
- use useState() react hook method to update the fetch product from sanity dataset.
- use setState() method inside useEffect() method 
- use loading, error and products properties in the return section of Home component of index.js file
- remove import Head from 'next/head'; from index.js file 
- make sure that the frontent and backend server is startup like this
 * for frontent -> C:\ComputerD\nextjs-sanity-amazona062022> npm run dev
 * for backend -> C:\ComputerD\nextjs-sanity-amazona062022\sanity> sanity start 
- click browser Network tab click on the following to view their content
 * Headers tab to view the endpoint like this
 Request URL: https://xybrcyhu.apicdn.sanity.io/v2021-08-31/data/query/production?query=*%5B_type%20%3D%3D%20%22product%22%5D
 * Payload tab to view the payload object like this
   query: *[_type == "product"]
 * Preview tab to view the return result object like this
  result: [{_createdAt: "2022-06-26T16:16:58Z", _id: "3c379d4c-faee-4a90-bedd-b39301d9d6ab",â€¦},â€¦]
   0: {_createdAt: "2022-06-26T16:16:58Z", _id: "3c379d4c-faee-4a90-bedd-b39301d9d6ab",â€¦}
   1: {_createdAt: "2022-06-26T16:11:07Z", _id: "49598d16-a3e8-4c9f-b187-5ae777724ae9",â€¦}
   2: {_createdAt: "2022-06-26T16:23:06Z", _id: "94d73134-069b-46c5-9c2d-0aac18e3cfb8",â€¦}
   3: {_createdAt: "2022-06-26T16:27:03Z", _id: "9a3974d2-3999-4baf-bd6a-b133463a8504",â€¦}
- create ProductItem.js file in components folder inorder to create ProductItem component to render the products on the Index.js file
- setup ProductItem.js file by type rfc
- install image-url library in the root folder like this
C:\ComputerD\nextjs-sanity-amazona062022> npm install @sanity/image-url --force
- create image.js file inside utils folder inorder to fetch image from sanity dataset
- use the image-url library inside utils/image.js file 
- use urlForThumbnail function inside ProductItem.js file 
- use ProductItems component in index.js file inplace of <Typography>{product.name}</Typography>
- let checkout the output on the browser
- Push code to Github 
- C:\ComputerD\nextjs-sanity-amazona062022> git init
- C:\ComputerD\nextjs-sanity-amazona062022> git status
- C:\ComputerD\nextjs-sanity-amazona062022> git add .
- C:\ComputerD\nextjs-sanity-amazona062022> git commit -m "sanity-amazona 2"
- C:\ComputerD\nextjs-sanity-amazona062022> git push -u origin main

Create Product Details Screen
   1. add [slug].js to product folder
   2. create component
   3. get slug from the url
   4. fetch product from sanity client
   5. render product image, info
   6. show add to cart button
- create product folder inside pages folder
- create [slug].js file inside pages/product folder inorder to achieve dynamic routing with next.js 
- setup [slug].js file
- add sx={classes.section} onto the 2nd <Box> component inside [slug].js file 
- create urlFor() function in utils/image.js file 
- import { urlFor } from '../../utils/image'; onto [slug].js
- add "cdn.sanity.io" hostname onto next.config.js like this
  images: {
    domains: ['cdn.sanity.io'],
  },
- stop and restartup next.js web server like this 
C:\ComputerD\nextjs-sanity-amazona062022> npm run dev
- Push code to Github Remote 
- C:\ComputerD\nextjs-sanity-amazona062022> git init
- C:\ComputerD\nextjs-sanity-amazona062022> git status
- C:\ComputerD\nextjs-sanity-amazona062022> git add .
- C:\ComputerD\nextjs-sanity-amazona062022> git commit -m "sanity-amazona 3"
- C:\ComputerD\nextjs-sanity-amazona062022> git push -u origin main

Create Dark and Light Mode
   1. define Context, Store and reducer
   2. set darkMode flag
   3. use it on layout
- create Store.js file inside utils folder inorder to setup store with Context API
- install js-cookie in the root terminal to save the type of mode choose by the user like this 
C:\ComputerD\nextjs-sanity-amazona062022> npm install js-cookie --force
- use the js-cookie in utils/Store.js file
- setup Store.js file 
- use the return <Store.Provider> component inside pages/_app.js file this will allow all the components in the app to have access to Context Api Store.
like this 
return (
    <CacheProvider value={emotionCache}>
      <StoreProvider>
        <Component {...pageProps} />;
      </StoreProvider>
    </CacheProvider>
  );
- open components/Layout.js file to add useContext() react hooks method right before theme object inorder to store and fetch data from Context Api store like this
const { state, dispatch } = useContext(Store);
const { darkMode } = state;
- use the destructure darkMode variable inside palette object of theme object like this 
- let add switch button onto header part of the app by going to <ThemeProvider> component then add Box component right inside Toolbar component then move NextLink component inside Box component like this 
<Box display="flex" alignItems="center">
   <NextLink href="/" passHref>
    {/* passHref props enable NextLink component to href value onto  Link component*/}
        <Link>
          <Typography sx={classes.brand}>amazona</Typography>
        </Link>
    </NextLink>
</Box>
- right after the above Box component added onto <ThemeProvider> component add Box component with Switch component nested inside it.
- let implement darkModeChangeHandler function inside Switch component right before return section.
- Push code to Github Remote 
- C:\ComputerD\nextjs-sanity-amazona062022> git init
- C:\ComputerD\nextjs-sanity-amazona062022> git status
- C:\ComputerD\nextjs-sanity-amazona062022> git add .
- C:\ComputerD\nextjs-sanity-amazona062022> git commit -m "sanity-amazona 4"
- C:\ComputerD\nextjs-sanity-amazona062022> git push -u origin main

Implement Add to cart
1. define cart in context
2. dispatch add to cart action
3. set click event handler for button
4. show cart items in the header menu
- open utils/Store.js file to add cart object onto initialState object inorder to fetch cartItems from Cookie storage like this 
const initialState = {
  darkMode: Cookies.get('darkMode') === 'ON' ? true : false,
  cart: {
    cartItems: Cookies.get('cartItems')
      ? JSON.parse(Cookies.get('cartItems'))
      : [],
  },
};
- open pages/product/[slug].js to find Add to cart button then add addToCartHandler() onto onClick event of Button component like this
<Button onClick={addToCartHandler} fullWidth variant="contained">Add to cart</Button>
- implement addToCartHandler() function right before return section
- fetch cart from Context Api store right before useState() like this 
const {state: { cart }, dispatch} = useContext(Store);
- use cart object inside addToCartHandler() function
- create products folder inside pages/api folder
- create [id].js file inside api/products folder inorder to implement backend api 
- install next-connect library its enable us implement backend api in nextjs
- install axios library inorder to send ajax request to backend like this
C:\ComputerD\nextjs-sanity-amazona062022> npm install next-connect@0.12.2 axios@0.27.2 --force
- setup [id].js dynamic route 
- install notistack library inorder to display messages to user like this 
 C:\ComputerD\nextjs-sanity-amazona062022> npm i notistack@2.0.5 --force
- import { useSnackbar } from 'notistack'; onto [slug].js file
- use useSnackbar() method right before useState() react hooks like this
const { enqueueSnackbar } = useSnackbar();
- use enqueueSnackbar to render message in addToCartHandler() function
- open _app.js file to wrap <SnackbarProvider> around the <StoreProvider> component inoreder to make the Snackbar avaliable to all the components in the app like this
<SnackbarProvider>
   <StoreProvider anchorOrigin={{ vertical: 'top', horizontal: 'center' }}>
     <Component {...pageProps} />;
   </StoreProvider>
</SnackbarProvider>
- import { SnackbarProvider } from 'notistack'; onto _app.js file
- open utils/Store.js to define CART_ADD_ITEM action type to add cart item onto Context Api store and Cookie right before default keyword 
- let checkout the functionality by click on ADD TO CART button and view Snackbar message on the browser.
- Push code to Github Remote 
- C:\ComputerD\nextjs-sanity-amazona062022> git init
- C:\ComputerD\nextjs-sanity-amazona062022> git status
- C:\ComputerD\nextjs-sanity-amazona062022> git add .
- C:\ComputerD\nextjs-sanity-amazona062022> git commit -m "sanity-amazona 5"
- C:\ComputerD\nextjs-sanity-amazona062022> git push -u origin main

Create Cart Screen
    1. get cart items from context
    2. render in the screen 
- create cart.js file inside pages folder to setup cart screen component
- setup cart.js 
- create updateCartHandler() and removeItemHandler() function right before return section
- use  const router = userRouter(); right before const {slug} = props; inside [slug].js file 
- open [slug].js file to redirect user to cart screen once user click on Add to Cart button right after  enqueueSnackbar(`${product.name} added to the cart`, {}) like this 
router.push('/cart');
- open utils/Store.js to implement this dispatch 'CART_REMOVE_ITEM' action type 
- let test the delete button in cart to see it remove item from cookie
- implement updateCartHandler() function inside cart.js file inorder to update the quantity selected by the user.
- let checkout the result on the browser

Create Header Menu
    1. add cart link to header
    2. show cart items badge in header
    3. add login link to header
    4. implement add to cart in home page
- open components/Layout.js file inorder
 * to fetch cart object from Context store at the beginning of the Layout component  like this 
  const { darkMode, cart } = state;
 * scroll down to right after Switch component to add NextLink component like this
	<NextLink href="/cart" passHref>
           <Link>
              <Typography >
                 {cart.cartItems.length > 0 ? (
                   <Badge
                        color="secondary"
                        badgeContent={cart.cartItems.length}
                      >
                        Cart
                      </Badge>
                    ) : (
                      'Cart'
                    )}
               </Typography>
            </Link>
        </NextLink>
- let activite ADD TO CART button in the Home screen by opening index.js file and implement addToCartHandler() function right before return selection
- fetch cart from Context store at the beginning of Home component like this
const {state: { cart }, dispatch} = useContext(Store);
- add snackbar right after cart object in index.js file like this
const { enqueueSnackbar } = useSnackbar();
- add useRouter() right after snackbar like this
const router = useRouter();
- go to ProductItem component inside index.js file to pass addToCartHandler as a props value like this 
- open ProductItem component to pass addToCartHandler as an argument onto ProductItem component and use the argument on the Button component like this  
<Button
   size="small"
   color="primary"
   onClick={() => addToCartHandler(product)}
>Add to cart</Button>
- let checkout the result on the browser






